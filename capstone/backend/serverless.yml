service:
  name: serverless-madewithlove-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PRODUCTS_TABLE: Products-${self:provider.stage}
    PRODUCTS_TABLE_SEC_INDEX: searchByUserId
    IMAGES_S3_BUCKET: products-ew12-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://madewithlove.eu.auth0.com/.well-known/jwks.json


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Made with love API
        description: Serverless application for a small ecommerce site
    models:
      - name: CreateProductRequest
        contentType: application/json
        schema: ${file(models/create-product-request.json)}
      - name: UpdateProductRequest
        contentType: application/json
        schema: ${file(models/update-product-request.json)}
    

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler


  GetProduct:
    handler: src/lambda/http/getProduct.handler
    events:
      - http:
          method: get
          path: product/{productId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:getItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}


  GetProducts:
    handler: src/lambda/http/getProducts.handler
    events:
      - http:
          method: get
          path: products
          cors: true
          # authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}


  GetMyProducts:
    handler: src/lambda/http/getMyProducts.handler
    events:
      - http:
          method: get
          path: my-products
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}/*

  CreateProduct:
    handler: src/lambda/http/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new product
            description: Create a new product
            requestModels:
              'application/json': CreateProductRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}


  UpdateProduct:
    handler: src/lambda/http/updateProduct.handler
    events:
      - http:
          method: patch
          path: product/{productId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a product
            description: Update a product
            requestModels:
              'application/json': UpdateProductRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}


  DeleteProduct:
    handler: src/lambda/http/deleteProduct.handler
    events:
      - http:
          method: delete
          path: product/{productId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: products/{productId}/imageUrl
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}

resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
              AllowedOrigins:
                - "*"
              MaxAge: 3000


    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: productId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PRODUCTS_TABLE_SEC_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: productId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

